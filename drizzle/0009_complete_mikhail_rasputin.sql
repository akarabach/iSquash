CREATE TABLE "event_participant" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "event_participant_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"event_id" bigint,
	"participant_id" uuid,
	"joined_at" timestamp(3) with time zone DEFAULT now(),
	CONSTRAINT "one_user_per_event" UNIQUE NULLS NOT DISTINCT("event_id","participant_id")
);
--> statement-breakpoint
ALTER TABLE "event_participant" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
ALTER TABLE "tournament" RENAME TO "event";--> statement-breakpoint
ALTER TABLE "event" DROP CONSTRAINT "tournament_owner_id_user_profile_id_fk";
--> statement-breakpoint
ALTER TABLE "event_participant" ADD CONSTRAINT "event_participant_event_id_event_id_fk" FOREIGN KEY ("event_id") REFERENCES "public"."event"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "event_participant" ADD CONSTRAINT "event_participant_participant_id_user_profile_id_fk" FOREIGN KEY ("participant_id") REFERENCES "public"."user_profile"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "event" ADD CONSTRAINT "event_owner_id_user_profile_id_fk" FOREIGN KEY ("owner_id") REFERENCES "public"."user_profile"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER POLICY "only public, owner" ON "event" RENAME TO "only public or owner can read";--> statement-breakpoint
CREATE POLICY "authenticated can insert" ON "event_participant" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK ("event_participant"."participant_id" = (select auth.uid()));--> statement-breakpoint
ALTER POLICY "owner can insert" ON "event" TO authenticated WITH CHECK ("event"."owner_id" = (select auth.uid()));--> statement-breakpoint
ALTER POLICY "owner can update" ON "event" TO authenticated USING ("event"."owner_id" = (select auth.uid())) WITH CHECK ("event"."owner_id" = (select auth.uid()));